package com.generation.tarefablogpessoal.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.generation.tarefablogpessoal.model.Postagem;
import com.generation.tarefablogpessoal.repository.PostagemRepository;

//@RestController deÔ¨Åne que a Classe √© do tipo RestController, que receber√° requisi√ß√µes que ser√£o compostas por:
//URL: Endere√ßo da requisi√ß√£o (endpoint)
//Verbo: Define qual M√©todo HTTP ser√° acionado na Classe controladora.
//Corpo da requisi√ß√£o (Request Body): Objeto que cont√©m os dados que ser√£o persistidos no Banco de dadas. 
//Nem toda a requisi√ß√£o enviar√° dados no Corpo da Requisi√ß√£o.
//Ap√≥s receber e processar a requisi√ß√£o, a Classe Controladora Responder√° a estas requisi√ß√µes com:
//Um C√≥digo de Status HTTP pertinente a opera√ß√£o que est√° sendo realizada.
//O resultado do processamento (Objetos de uma Classe, por ex) inserido diretamente no corpo da resposta (Response Body)
@RestController

//@RequestMapping √© usada para mapear as solicita√ß√µes para os M√©todos da Classe controladora PostagemController, 
//ou seja, definir a URL (endere√ßo) padr√£o do Recurso (/postagens). Ao digitar a url do servidor seguida da url 
//do Recurso (http://localhost:8080/postagens), o Spring envia a requisi√ß√£o para a Classe respons√°vel pelo 
//Recurso associado √† este endere√ßo.
@RequestMapping("/postagens")

//@CrossOrigin indica que a Classe controladora permitir√° o recebimento de requisi√ß√µes realizadas de fora do dom√≠nio 
//(localhost e futuramente do heroku quando o deploy for realizado) ao qual ela pertence. Essa anota√ß√£o √© essencial 
//para que o front-end (Angular ou React), tenha acesso √† nossa aplica√ß√£o (O termo t√©cnico √© consumir a API). 
//Al√©m de liberar todas as Origens das requisi√ß√µes (par√¢metro origins), a anota√ß√£o libera tamb√©m os Cabe√ßalhos 
//das Requisi√ß√µes (par√¢metro allowedHeaders), que em alguns casos trazem informa√ß√µes essenciais para o correto 
//funcionamento da aplica√ß√£o. Um bom exemplo √© o Token de Seguran√ßa, que veremos mais √† frente, que tem a fun√ß√£o 
//de liberar o acesso √† um endpoint espec√≠fico. Em produ√ß√£o recomenda-se substituir o * pelo endere√ßo do deploy do frontend
@CrossOrigin(origins="*",allowedHeaders="*")

//Essa √© a terceira classe que eu vou criar!
public class PostagemController {
	
	//@Autowired (Inje√ß√£o de Depend√™ncia), √© a implementa√ß√£o utilizada pelo Spring Framework para aplicar a 
	//Invers√£o de Controle (IoC) quando for necess√°rio. A Inje√ß√£o de Depend√™ncia define quais Classes ser√£o 
	//instanciadas e em quais lugares ser√£o Injetadas quando houver necessidade.
	@Autowired
	private PostagemRepository postagemRepository;
	
	/*
	Em nosso exemplo, a Classe Controladora cria um ponto de inje√ß√£o da Interface PostagemRepository e quando houver 
	a necessidade o Spring Framework cria um novo Objeto da Classe Postagem a partir da Interface PostagemRepository, 
	permitindo o uso de todos os M√©todos da Interface (M√©todos Padr√£o ou Personalizados), sem a necessidade de criar 
	M√©todos Construtores na Classe Model ou Criar/Instanciar Objetos de forma manual (igual voc√™s fizeram no Bloco I). 
	Estamos transferindo a responsabilidade desta tarefa para o Spring e desta forma nos preocuparemos apenas com o 
	processamento das Requisi√ß√µes.
    */

	//@GetMapping mapeia todas as Requisi√ß√µes HTTP GET, enviadas para um endere√ßo espec√≠fico, chamado endpoint, 
	//dentro do Recurso Postagem, para um M√©todo espec√≠fico que responder√° a requisi√ß√£o, ou seja, ele indica que 
	//o M√©todo getAll() responder√° todas requisi√ß√µes do tipo HTTP GET, enviadas no http://localhost:8080/postagens/.
	@GetMapping
	
	//O M√©todo getAll() ser√° do tipo ResponseEntity porqu√™ ele responder√° a Requisi√ß√£o HTTP (HTTP Request), 
	//com uma Resposta HTTP (HTTP Response).
	//<list<postagem>>: O M√©todo al√©m de retornar um objeto da Classe ResponseEntity (OK ü°™200), no par√¢metro body 
	//(Corpo da Resposta), ser√° retornado um Objeto da Classe List (Collection), contendo todos os Objetos da Classe 
	//Postagem persistidos no Banco de dados, na tabela tb_postagens. Observe que nesta linha foi utilizado um 
	//recurso chamado Java Generics, que al√©m de simplificar o retorno do Objeto da Classe List, dispensa o uso do 
	//casting (mudan√ßa de tipos). Observe que na defini√ß√£o do M√©todo foram utilizados os s√≠mbolos , onde T √© o 
	//Tipo do Objeto que ser√° retornado no Corpo da Resposta.
	public ResponseEntity<List<Postagem>> getAll(){
		
		//return ResponseEntity.ok(postagemRepository.findAll()); Executa o M√©todo findAll() (M√©todo padr√£o da 
		//Interface JpaRepository), que retornar√° todos os Objetos da Classe Postagem persistidos no Banco de dados 
		//(<List<postagem>>). Como a List sempre ser√° gerada (vazia ou n√£o), o M√©todo sempre retornar√° o Status 200 ü°™ OK
		return ResponseEntity.ok(postagemRepository.findAll());
	}
	
}

/*
A Classe PostagemController ser√° a Classe Controladora do Recurso Postagem, ou seja, ela ir√° responder toda e 
qualquer Requisi√ß√£o (HTTP Request), que for enviada de fora da aplica√ß√£o para o Recurso Postagem. Dentro desta 
Classe iremos implementar os M√©todos do CRUD (Create, Read, Update e Delete), que fazem parte da Interface 
JpaRepository e os M√©todos Personalizados (Consultas), que ser√£o assinados dentro da Interface PostagemRepository.
*/
